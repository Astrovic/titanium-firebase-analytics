/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package firebase.analytics;

import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollModule;

import org.appcelerator.titanium.io.TiBaseFile;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.TiBlob;
import org.appcelerator.titanium.util.TiConvert;

import android.os.Bundle;

import com.google.firebase.analytics.FirebaseAnalytics;
import com.google.firebase.analytics.FirebaseAnalytics.Param;

import java.io.IOException;
import java.util.Map;

@Kroll.module(name="TitaniumFirebaseAnalytics", id="firebase.analytics")
public class TitaniumFirebaseAnalyticsModule extends KrollModule
{
	private static final String LCAT = "TitaniumFirebaseAnalyticsModule";
	private static final boolean DBG = TiConfig.LOGD;
  private static FirebaseAnalytics mFirebaseAnalytics;

	public TitaniumFirebaseAnalyticsModule()
	{
		super();
	}
  
  // TODO: Eventually find a proper place to initialize it so we don't need a lazy initializer
  private FirebaseAnalytics analyticsInstance()
  {
    if (this.mFirebaseAnalytics == null) {
      this.mFirebaseAnalytics = FirebaseAnalytics.getInstance(getActivity().getApplicationContext());
    }
    
    return this.mFirebaseAnalytics;
  }

  @Kroll.method
  public void log(String name, KrollDict parameters)
  {
    this.analyticsInstance().logEvent(name, this.mapToBundle(parameters));
  }

  @Kroll.method @Kroll.setProperty
  public void setUserPropertyString(KrollDict parameters)
  {
    this.analyticsInstance().setUserProperty(TiConvert.toString(parameters, "name"), TiConvert.toString(parameters, "value"));
  }

  @Kroll.method @Kroll.setProperty
  public void setScreenNameAndScreenClass(KrollDict parameters)
  {
    if (parameters.containsKey("screenName")) {
      this.analyticsInstance().setCurrentScreen(getActivity(), TiConvert.toString(parameters, "screenName"), null);
    } else {
      Log.e(LCAT, "Unable to set current screen without the missing \"screenName\" key");
    }
  }
  
  private static Bundle mapToBundle(Map<String, Object> map)
  {
    if (map == null) return new Bundle();
    Bundle bundle = new Bundle(map.size());
    
    for (String key : map.keySet()) {
      Object val = map.get(key);
      if (val == null) {
        bundle.putString(key, null);
      } else if (val instanceof TiBlob) {
        bundle.putByteArray(key, ((TiBlob)val).getBytes());
      } else if (val instanceof TiBaseFile) {
        try {
          bundle.putByteArray(key, ((TiBaseFile)val).read().getBytes());
        } catch (IOException e) {
          Log.e("FacebookModule-Util", "Unable to put '" + key + "' value into bundle: " + e.getLocalizedMessage(), e);
        }
      } else {
        bundle.putString(key, TiConvert.toString(val));
      }
    }
    
    return bundle;
  }
}
